// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  RECRUITER
  CANDIDATE
}

enum ApplicantExperienceLevel {
  JUNIOR
  MID_LEVEL
  SENIOR
}

enum jobDuration {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ApplicantStatus {
  ACTIVELY_LOOKING
  NOT_LOOKING
  OPEN_TO_OFFERS
}

enum workType {
  REMOTE
  ONSITE
  HYBRID
}

enum Gender {
  MALE
  FEMALE
}

model subscription_type {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscription subscription[]
}

model subscription {
  id                 Int                @id @default(autoincrement())
  userId             Int
  subscriptionTypeId Int
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id])
  subscription_type  subscription_type? @relation(fields: [subscriptionTypeId], references: [id])
}

model messages {
  id         String   @id @default(uuid())
  content    String
  senderId   Int
  receiverId Int
  createdAt  DateTime @default(now())
}

model job_details {
  jobId          Int                      @id
  title          String
  jobDescription String
  workType       workType
  jobDuration    jobDuration
  experience     ApplicantExperienceLevel
  salaryRange    String
  Job            Job?                     @relation(fields: [jobId], references: [id])
}

model company {
  name        String @id
  description String
  location    String
  jobs        Int[]
}

model User {
  id                 Int                  @id @default(autoincrement())
  roleId             UserRole             @default(CANDIDATE)
  userDetail         personal_details?
  activities         user_activities[]
  education          education[]
  work_experience    work_experience[]
  PasswordResetToken PasswordResetToken[]
  jobs               Job[]
  subscription       subscription[]
}

model Job {
  id         Int          @id @default(autoincrement())
  jobDetails job_details?
  postedById Int
  postedBy   User         @relation(fields: [postedById], references: [id])
}

model PasswordResetToken {
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @id
  createdAt DateTime @default(now())
}

model education {
  userId                     Int
  user                       User                  @relation(fields: [userId], references: [id])
  schoolName                 String                @id
  degree                     String
  grade                      String
  graduationDate             DateTime
  professional_details       professional_details? @relation(fields: [professional_detailsUserId], references: [userId])
  professional_detailsUserId Int?
}

model work_experience {
  userId                     Int
  user                       User                  @relation(fields: [userId], references: [id])
  companyName                String                @id
  jobTitle                   String
  startDate                  DateTime
  endDate                    DateTime
  description                String
  professional_details       professional_details? @relation(fields: [professional_detailsUserId], references: [userId])
  professional_detailsUserId Int?
}

model user_activities {
  userId  Int    @id
  user    User   @relation(fields: [userId], references: [id])
  content String
}

model personal_details {
  userId                Int       @unique
  email                 String    @id @unique
  pin                   String
  firstName             String?
  lastName              String?
  phoneNumber           String?
  sex                   Gender?
  dateOfBirth           DateTime?
  meansOfIdentification String?
  profilePicture        String?
  profileVideo          String?
  createdAt             DateTime  @default(now())
  user                  User      @relation(fields: [userId], references: [id])
}

model applicant_status {
  id   Int             @id @default(autoincrement())
  name ApplicantStatus @default(NOT_LOOKING)
}

model role {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model professional_details {
  userId              Int                      @id
  statusId            Int
  jobRole             String
  yearsOfExperience   Int
  professionalSummary String
  jobPreference       workType                 @default(REMOTE)
  skills              String[]
  interests           String[]
  salaryRange         String
  experienceLevel     ApplicantExperienceLevel
  highestEducation    String
  education           education[]
  allWorkExperience   work_experience[]
  createdAt           DateTime                 @default(now())
}
